TERRAFORM 

[ TYPE OF BLOCKS IN TERRAFORM ]

TERRAFORM SETTING BLOCK
Carries the required version and provider.
- Required Version
- Required Provider

PROVIDER BLOCK
Indicates the provider plugins. Which states how terraform will interface with the cloud environment.
(Go and connect with AWS with these credentials in said - Region)
- Provider Name
- Region
- Profile

DATA BLOCK
Is used to retrieve or query data from a data resource which can be used in the TF configuration. 

RESOURCE BLOCK
Defines and configures: EC2, Network, Database, representing the desired state of the resource. 

MODULE BLOCK
A series .tf files is considered a module. 

VARIABLE BLOCK
Is used to define input variables that allow you to parameterize and customize your infrastructure configurations.

OUTPUT BLOCK
Values that can be exposed after infrastructure provisioning and used for reference.
It’s a feature used to display and extract values from your infrastructure.

LOCAL BLOCK
Is like writing a personal note for yourself in your code to make it easier to understand and manage.

TERRAFORM STATE BASICS
# terraform apply
- After infractructure is provisioned...
- The Terraform State File is created in your local working dir: “terraform.tfstate” or remote s3 bucket if defined.
            * It’s the underlying database and is critical to your entire TF infrastructure.
            * It’s a map that contains all the infrastructure info.

DESIRED STATE:
- Is nothing but your TF Configuration files: versions.tf, ec2-instance.tf, etc.

CURRENT STATE:
- Real world Resource created by TF…  like EC2 instances

WHAT IS TERRAFORM LOCK?
SHORT: 
It’s to prevent all other operations from writing state. 

LONG:
If supported by your backend, Terraform will lock your state for all operations that could write state. 
This prevents others from acquiring the lock and potentially corrupting your state. State locking happens automatically 
on all operations that could write state. You won't see any message that it is happening.

lock.hcl
was introduced in Terraform 0.14. It's designed to record the exact package versions used to satisfy each provider requirement in your configuration. 
This ensures that every member of your team and your deployment systems use the same provider versions, avoiding inconsistencies and potential bugs.








